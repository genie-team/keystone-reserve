// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Post {
  id          String          @id @default(cuid())
  title       String          @default("")
  slug        String          @unique @default("")
  status      PostStatusType?
  publishDate DateTime?
  author      User?           @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?         @map("author")

  @@index([authorId])
}

model User {
  id                         String        @id @default(cuid())
  name                       String        @default("")
  email                      String        @unique @default("")
  posts                      Post[]        @relation("Post_author")
  phoneNumbers               PhoneNumber[] @relation("PhoneNumber_user")
  roles                      Role[]        @relation("Role_users")
  firebaseId                 String        @unique @default("")
  reservations               Reservation[] @relation("Reservation_user")
  lastUpdated                DateTime?     @updatedAt
  updatedAt                  DateTime?     @updatedAt
  createdAt                  DateTime?     @default(now())
  updatedBy                  User?         @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                String?       @map("updatedBy")
  createdBy                  User?         @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                String?       @map("createdBy")
  from_User_updatedBy        User[]        @relation("User_updatedBy")
  from_User_createdBy        User[]        @relation("User_createdBy")
  from_Reservable_updatedBy  Reservable[]  @relation("Reservable_updatedBy")
  from_Reservable_createdBy  Reservable[]  @relation("Reservable_createdBy")
  from_Reservation_updatedBy Reservation[] @relation("Reservation_updatedBy")
  from_Reservation_createdBy Reservation[] @relation("Reservation_createdBy")
  from_Receipt_updatedBy     Receipt[]     @relation("Receipt_updatedBy")
  from_Receipt_createdBy     Receipt[]     @relation("Receipt_createdBy")

  @@index([updatedById])
  @@index([createdById])
}

model PhoneNumber {
  id     String  @id @default(cuid())
  user   User?   @relation("PhoneNumber_user", fields: [userId], references: [id])
  userId String? @map("user")
  type   String?
  value  String  @default("")

  @@index([userId])
}

model Role {
  id    String @id @default(cuid())
  value String @default("")
  users User[] @relation("Role_users")
}

model Address {
  id                                    String                     @id @default(cuid())
  address                               String                     @default("")
  city                                  String                     @default("")
  state                                 AddressStateType?
  zipCode                               String                     @default("")
  from_ReservablePickupLocation_address ReservablePickupLocation[] @relation("ReservablePickupLocation_address")
}

model Reservable {
  id                  String                          @id @default(cuid())
  name                String                          @default("")
  make                String                          @default("")
  model               String                          @default("")
  seats               Int
  tags                ReservableTag[]                 @relation("Reservable_tags")
  description         Json                            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  features            ReservableFeature[]             @relation("Reservable_features")
  files               ReservableFile[]                @relation("Reservable_files")
  pickup              ReservablePickupLocation?       @relation("Reservable_pickup", fields: [pickupId], references: [id])
  pickupId            String?                         @map("pickup")
  extras              Json                            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  cancellationCost    ReservableCancellationCost?     @relation("Reservable_cancellationCost", fields: [cancellationCostId], references: [id])
  cancellationCostId  String?                         @map("cancellationCost")
  availabilityInclude ReservableAvailabilityInclude[] @relation("Reservable_availabilityInclude")
  availabilityExclude ReservableAvailabilityExclude[] @relation("Reservable_availabilityExclude")
  images              ReservableImage[]               @relation("Reservable_images")
  reservations        Reservation[]                   @relation("Reservation_reservable")
  updatedAt           DateTime?                       @updatedAt
  createdAt           DateTime?                       @default(now())
  updatedBy           User?                           @relation("Reservable_updatedBy", fields: [updatedById], references: [id])
  updatedById         String?                         @map("updatedBy")
  createdBy           User?                           @relation("Reservable_createdBy", fields: [createdById], references: [id])
  createdById         String?                         @map("createdBy")

  @@index([pickupId])
  @@index([cancellationCostId])
  @@index([updatedById])
  @@index([createdById])
}

model ReservableTag {
  id          String       @id @default(cuid())
  value       String       @default("")
  reservables Reservable[] @relation("Reservable_tags")
}

model ReservableFeature {
  id          String       @id @default(cuid())
  value       String       @default("")
  reservables Reservable[] @relation("Reservable_features")
}

model ReservablePickupLocation {
  id          String       @id @default(cuid())
  name        String       @default("")
  address     Address?     @relation("ReservablePickupLocation_address", fields: [addressId], references: [id])
  addressId   String?      @map("address")
  reservables Reservable[] @relation("Reservable_pickup")

  @@index([addressId])
}

model ReservableCancellationCost {
  id          String       @id @default(cuid())
  cost        Int?
  isPercent   Boolean      @default(false)
  reservables Reservable[] @relation("Reservable_cancellationCost")
}

model ReservableImage {
  id                     String       @id @default(cuid())
  name                   String       @default("")
  alt                    String       @default("")
  image_filesize         Int?
  image_extension        String?
  image_width            Int?
  image_height           Int?
  image_id               String?
  image_sizesMeta        Json?
  from_Reservable_images Reservable[] @relation("Reservable_images")
}

model ReservableFile {
  id                    String       @id @default(cuid())
  name                  String       @default("")
  file_filename         String?
  file_filesize         Int?
  from_Reservable_files Reservable[] @relation("Reservable_files")
}

model ReservableAvailabilityExclude {
  id                                  String       @id @default(cuid())
  startDate                           DateTime
  endDate                             DateTime
  from_Reservable_availabilityExclude Reservable[] @relation("Reservable_availabilityExclude")

  @@index([startDate])
  @@index([endDate])
}

model ReservableAvailabilityInclude {
  id                                  String       @id @default(cuid())
  startDate                           DateTime
  endDate                             DateTime
  cost                                Int?
  from_Reservable_availabilityInclude Reservable[] @relation("Reservable_availabilityInclude")

  @@index([startDate])
  @@index([endDate])
}

model Reservation {
  id           String      @id @default(cuid())
  user         User?       @relation("Reservation_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  reservable   Reservable? @relation("Reservation_reservable", fields: [reservableId], references: [id])
  reservableId String?     @map("reservable")
  startDate    DateTime
  endDate      DateTime?
  totalCost    Int?
  receipt      Receipt?    @relation("Receipt_reservable")
  updatedAt    DateTime?   @updatedAt
  createdAt    DateTime?   @default(now())
  updatedBy    User?       @relation("Reservation_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?     @map("updatedBy")
  createdBy    User?       @relation("Reservation_createdBy", fields: [createdById], references: [id])
  createdById  String?     @map("createdBy")

  @@index([userId])
  @@index([reservableId])
  @@index([startDate])
  @@index([endDate])
  @@index([updatedById])
  @@index([createdById])
}

model Receipt {
  id           String       @id @default(cuid())
  reservable   Reservation? @relation("Receipt_reservable", fields: [reservableId], references: [id])
  reservableId String?      @unique @map("reservable")
  totalCost    Int?
  updatedAt    DateTime?    @updatedAt
  createdAt    DateTime?    @default(now())
  updatedBy    User?        @relation("Receipt_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?      @map("updatedBy")
  createdBy    User?        @relation("Receipt_createdBy", fields: [createdById], references: [id])
  createdById  String?      @map("createdBy")

  @@index([updatedById])
  @@index([createdById])
}

enum PostStatusType {
  draft
  published
}

enum AddressStateType {
  AL
  AK
  AS
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FM
  FL
  GA
  GU
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MH
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  MP
  OH
  OK
  OR
  PW
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VI
  VA
  WA
  WV
  WI
  WY
  AA
  AE
  AP
}