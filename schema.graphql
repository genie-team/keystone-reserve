# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  """
   Publish a post
  """
  publishPost(id: ID!): Post
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber
  createPhoneNumbers(data: [PhoneNumberCreateInput!]!): [PhoneNumber]
  updatePhoneNumber(
    where: PhoneNumberWhereUniqueInput!
    data: PhoneNumberUpdateInput!
  ): PhoneNumber
  updatePhoneNumbers(data: [PhoneNumberUpdateArgs!]!): [PhoneNumber]
  deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  deletePhoneNumbers(where: [PhoneNumberWhereUniqueInput!]!): [PhoneNumber]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createReservable(data: ReservableCreateInput!): Reservable
  createReservables(data: [ReservableCreateInput!]!): [Reservable]
  updateReservable(
    where: ReservableWhereUniqueInput!
    data: ReservableUpdateInput!
  ): Reservable
  updateReservables(data: [ReservableUpdateArgs!]!): [Reservable]
  deleteReservable(where: ReservableWhereUniqueInput!): Reservable
  deleteReservables(where: [ReservableWhereUniqueInput!]!): [Reservable]
  createReservableTag(data: ReservableTagCreateInput!): ReservableTag
  createReservableTags(data: [ReservableTagCreateInput!]!): [ReservableTag]
  updateReservableTag(
    where: ReservableTagWhereUniqueInput!
    data: ReservableTagUpdateInput!
  ): ReservableTag
  updateReservableTags(data: [ReservableTagUpdateArgs!]!): [ReservableTag]
  deleteReservableTag(where: ReservableTagWhereUniqueInput!): ReservableTag
  deleteReservableTags(
    where: [ReservableTagWhereUniqueInput!]!
  ): [ReservableTag]
  createReservableFeature(
    data: ReservableFeatureCreateInput!
  ): ReservableFeature
  createReservableFeatures(
    data: [ReservableFeatureCreateInput!]!
  ): [ReservableFeature]
  updateReservableFeature(
    where: ReservableFeatureWhereUniqueInput!
    data: ReservableFeatureUpdateInput!
  ): ReservableFeature
  updateReservableFeatures(
    data: [ReservableFeatureUpdateArgs!]!
  ): [ReservableFeature]
  deleteReservableFeature(
    where: ReservableFeatureWhereUniqueInput!
  ): ReservableFeature
  deleteReservableFeatures(
    where: [ReservableFeatureWhereUniqueInput!]!
  ): [ReservableFeature]
  createReservablePickupLocation(
    data: ReservablePickupLocationCreateInput!
  ): ReservablePickupLocation
  createReservablePickupLocations(
    data: [ReservablePickupLocationCreateInput!]!
  ): [ReservablePickupLocation]
  updateReservablePickupLocation(
    where: ReservablePickupLocationWhereUniqueInput!
    data: ReservablePickupLocationUpdateInput!
  ): ReservablePickupLocation
  updateReservablePickupLocations(
    data: [ReservablePickupLocationUpdateArgs!]!
  ): [ReservablePickupLocation]
  deleteReservablePickupLocation(
    where: ReservablePickupLocationWhereUniqueInput!
  ): ReservablePickupLocation
  deleteReservablePickupLocations(
    where: [ReservablePickupLocationWhereUniqueInput!]!
  ): [ReservablePickupLocation]
  createReservableCancellationCost(
    data: ReservableCancellationCostCreateInput!
  ): ReservableCancellationCost
  createReservableCancellationCosts(
    data: [ReservableCancellationCostCreateInput!]!
  ): [ReservableCancellationCost]
  updateReservableCancellationCost(
    where: ReservableCancellationCostWhereUniqueInput!
    data: ReservableCancellationCostUpdateInput!
  ): ReservableCancellationCost
  updateReservableCancellationCosts(
    data: [ReservableCancellationCostUpdateArgs!]!
  ): [ReservableCancellationCost]
  deleteReservableCancellationCost(
    where: ReservableCancellationCostWhereUniqueInput!
  ): ReservableCancellationCost
  deleteReservableCancellationCosts(
    where: [ReservableCancellationCostWhereUniqueInput!]!
  ): [ReservableCancellationCost]
  createReservableImage(data: ReservableImageCreateInput!): ReservableImage
  createReservableImages(
    data: [ReservableImageCreateInput!]!
  ): [ReservableImage]
  updateReservableImage(
    where: ReservableImageWhereUniqueInput!
    data: ReservableImageUpdateInput!
  ): ReservableImage
  updateReservableImages(data: [ReservableImageUpdateArgs!]!): [ReservableImage]
  deleteReservableImage(
    where: ReservableImageWhereUniqueInput!
  ): ReservableImage
  deleteReservableImages(
    where: [ReservableImageWhereUniqueInput!]!
  ): [ReservableImage]
  createReservableFile(data: ReservableFileCreateInput!): ReservableFile
  createReservableFiles(data: [ReservableFileCreateInput!]!): [ReservableFile]
  updateReservableFile(
    where: ReservableFileWhereUniqueInput!
    data: ReservableFileUpdateInput!
  ): ReservableFile
  updateReservableFiles(data: [ReservableFileUpdateArgs!]!): [ReservableFile]
  deleteReservableFile(where: ReservableFileWhereUniqueInput!): ReservableFile
  deleteReservableFiles(
    where: [ReservableFileWhereUniqueInput!]!
  ): [ReservableFile]
  createReservableAvailabilityExclude(
    data: ReservableAvailabilityExcludeCreateInput!
  ): ReservableAvailabilityExclude
  createReservableAvailabilityExcludes(
    data: [ReservableAvailabilityExcludeCreateInput!]!
  ): [ReservableAvailabilityExclude]
  updateReservableAvailabilityExclude(
    where: ReservableAvailabilityExcludeWhereUniqueInput!
    data: ReservableAvailabilityExcludeUpdateInput!
  ): ReservableAvailabilityExclude
  updateReservableAvailabilityExcludes(
    data: [ReservableAvailabilityExcludeUpdateArgs!]!
  ): [ReservableAvailabilityExclude]
  deleteReservableAvailabilityExclude(
    where: ReservableAvailabilityExcludeWhereUniqueInput!
  ): ReservableAvailabilityExclude
  deleteReservableAvailabilityExcludes(
    where: [ReservableAvailabilityExcludeWhereUniqueInput!]!
  ): [ReservableAvailabilityExclude]
  createReservableAvailabilityInclude(
    data: ReservableAvailabilityIncludeCreateInput!
  ): ReservableAvailabilityInclude
  createReservableAvailabilityIncludes(
    data: [ReservableAvailabilityIncludeCreateInput!]!
  ): [ReservableAvailabilityInclude]
  updateReservableAvailabilityInclude(
    where: ReservableAvailabilityIncludeWhereUniqueInput!
    data: ReservableAvailabilityIncludeUpdateInput!
  ): ReservableAvailabilityInclude
  updateReservableAvailabilityIncludes(
    data: [ReservableAvailabilityIncludeUpdateArgs!]!
  ): [ReservableAvailabilityInclude]
  deleteReservableAvailabilityInclude(
    where: ReservableAvailabilityIncludeWhereUniqueInput!
  ): ReservableAvailabilityInclude
  deleteReservableAvailabilityIncludes(
    where: [ReservableAvailabilityIncludeWhereUniqueInput!]!
  ): [ReservableAvailabilityInclude]
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(
    where: ReservationWhereUniqueInput!
    data: ReservationUpdateInput!
  ): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createReceipt(data: ReceiptCreateInput!): Receipt
  createReceipts(data: [ReceiptCreateInput!]!): [Receipt]
  updateReceipt(
    where: ReceiptWhereUniqueInput!
    data: ReceiptUpdateInput!
  ): Receipt
  updateReceipts(data: [ReceiptUpdateArgs!]!): [Receipt]
  deleteReceipt(where: ReceiptWhereUniqueInput!): Receipt
  deleteReceipts(where: [ReceiptWhereUniqueInput!]!): [Receipt]
}

type Query {
  dateReservableSearch(
    startDate: DateTime!
    endDate: DateTime
    reservableID: ID
  ): [Reservable]

  """
   Compute statistics for a user
  """
  stats(id: ID!): Statistics
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  phoneNumbers(
    where: PhoneNumberWhereInput! = {}
    orderBy: [PhoneNumberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PhoneNumber!]
  phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  phoneNumbersCount(where: PhoneNumberWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  reservables(
    where: ReservableWhereInput! = {}
    orderBy: [ReservableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservable!]
  reservable(where: ReservableWhereUniqueInput!): Reservable
  reservablesCount(where: ReservableWhereInput! = {}): Int
  reservableTags(
    where: ReservableTagWhereInput! = {}
    orderBy: [ReservableTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableTag!]
  reservableTag(where: ReservableTagWhereUniqueInput!): ReservableTag
  reservableTagsCount(where: ReservableTagWhereInput! = {}): Int
  reservableFeatures(
    where: ReservableFeatureWhereInput! = {}
    orderBy: [ReservableFeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableFeature!]
  reservableFeature(
    where: ReservableFeatureWhereUniqueInput!
  ): ReservableFeature
  reservableFeaturesCount(where: ReservableFeatureWhereInput! = {}): Int
  reservablePickupLocations(
    where: ReservablePickupLocationWhereInput! = {}
    orderBy: [ReservablePickupLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservablePickupLocation!]
  reservablePickupLocation(
    where: ReservablePickupLocationWhereUniqueInput!
  ): ReservablePickupLocation
  reservablePickupLocationsCount(
    where: ReservablePickupLocationWhereInput! = {}
  ): Int
  reservableCancellationCosts(
    where: ReservableCancellationCostWhereInput! = {}
    orderBy: [ReservableCancellationCostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableCancellationCost!]
  reservableCancellationCost(
    where: ReservableCancellationCostWhereUniqueInput!
  ): ReservableCancellationCost
  reservableCancellationCostsCount(
    where: ReservableCancellationCostWhereInput! = {}
  ): Int
  reservableImages(
    where: ReservableImageWhereInput! = {}
    orderBy: [ReservableImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableImage!]
  reservableImage(where: ReservableImageWhereUniqueInput!): ReservableImage
  reservableImagesCount(where: ReservableImageWhereInput! = {}): Int
  reservableFiles(
    where: ReservableFileWhereInput! = {}
    orderBy: [ReservableFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableFile!]
  reservableFile(where: ReservableFileWhereUniqueInput!): ReservableFile
  reservableFilesCount(where: ReservableFileWhereInput! = {}): Int
  reservableAvailabilityExcludes(
    where: ReservableAvailabilityExcludeWhereInput! = {}
    orderBy: [ReservableAvailabilityExcludeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableAvailabilityExclude!]
  reservableAvailabilityExclude(
    where: ReservableAvailabilityExcludeWhereUniqueInput!
  ): ReservableAvailabilityExclude
  reservableAvailabilityExcludesCount(
    where: ReservableAvailabilityExcludeWhereInput! = {}
  ): Int
  reservableAvailabilityIncludes(
    where: ReservableAvailabilityIncludeWhereInput! = {}
    orderBy: [ReservableAvailabilityIncludeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableAvailabilityInclude!]
  reservableAvailabilityInclude(
    where: ReservableAvailabilityIncludeWhereUniqueInput!
  ): ReservableAvailabilityInclude
  reservableAvailabilityIncludesCount(
    where: ReservableAvailabilityIncludeWhereInput! = {}
  ): Int
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  receipts(
    where: ReceiptWhereInput! = {}
    orderBy: [ReceiptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Receipt!]
  receipt(where: ReceiptWhereUniqueInput!): Receipt
  receiptsCount(where: ReceiptWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

"""
 A custom type to represent statistics for a user
"""
type Statistics {
  draft: Int
  published: Int
  latest: Post
}

type Post {
  id: ID!
  title: String
  slug: String
  status: PostStatusType
  publishDate: DateTime
  author: User
}

enum PostStatusType {
  draft
  published
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: PostStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  status: PostStatusType
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  status: PostStatusType
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  phoneNumbers(
    where: PhoneNumberWhereInput! = {}
    orderBy: [PhoneNumberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PhoneNumber!]
  phoneNumbersCount(where: PhoneNumberWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  firebaseId: String
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservationsCount(where: ReservationWhereInput! = {}): Int
  lastUpdated: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input UserWhereUniqueInput {
  id: ID
  email: String
  firebaseId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  phoneNumbers: PhoneNumberManyRelationFilter
  roles: RoleManyRelationFilter
  firebaseId: StringFilter
  reservations: ReservationManyRelationFilter
  lastUpdated: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PhoneNumberManyRelationFilter {
  every: PhoneNumberWhereInput
  some: PhoneNumberWhereInput
  none: PhoneNumberWhereInput
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input ReservationManyRelationFilter {
  every: ReservationWhereInput
  some: ReservationWhereInput
  none: ReservationWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  firebaseId: OrderDirection
  lastUpdated: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  posts: PostRelateToManyForUpdateInput
  phoneNumbers: PhoneNumberRelateToManyForUpdateInput
  roles: RoleRelateToManyForUpdateInput
  firebaseId: String
  reservations: ReservationRelateToManyForUpdateInput
  lastUpdated: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PhoneNumberRelateToManyForUpdateInput {
  disconnect: [PhoneNumberWhereUniqueInput!]
  set: [PhoneNumberWhereUniqueInput!]
  create: [PhoneNumberCreateInput!]
  connect: [PhoneNumberWhereUniqueInput!]
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input ReservationRelateToManyForUpdateInput {
  disconnect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  posts: PostRelateToManyForCreateInput
  phoneNumbers: PhoneNumberRelateToManyForCreateInput
  roles: RoleRelateToManyForCreateInput
  firebaseId: String
  reservations: ReservationRelateToManyForCreateInput
  lastUpdated: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PhoneNumberRelateToManyForCreateInput {
  create: [PhoneNumberCreateInput!]
  connect: [PhoneNumberWhereUniqueInput!]
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input ReservationRelateToManyForCreateInput {
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

type PhoneNumber {
  id: ID!
  label: String
  user: User
  type: String
  value: String
}

input PhoneNumberWhereUniqueInput {
  id: ID
}

input PhoneNumberWhereInput {
  AND: [PhoneNumberWhereInput!]
  OR: [PhoneNumberWhereInput!]
  NOT: [PhoneNumberWhereInput!]
  id: IDFilter
  user: UserWhereInput
  type: StringNullableFilter
  value: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PhoneNumberOrderByInput {
  id: OrderDirection
  type: OrderDirection
  value: OrderDirection
}

input PhoneNumberUpdateInput {
  user: UserRelateToOneForUpdateInput
  type: String
  value: String
}

input PhoneNumberUpdateArgs {
  where: PhoneNumberWhereUniqueInput!
  data: PhoneNumberUpdateInput!
}

input PhoneNumberCreateInput {
  user: UserRelateToOneForCreateInput
  type: String
  value: String
}

type Role {
  id: ID!
  value: String
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  value: StringFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input RoleUpdateInput {
  value: String
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  value: String
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Address {
  id: ID!
  address: String
  city: String
  state: AddressStateType
  zipCode: String
}

enum AddressStateType {
  AL
  AK
  AS
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FM
  FL
  GA
  GU
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MH
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  MP
  OH
  OK
  OR
  PW
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VI
  VA
  WA
  WV
  WI
  WY
  AA
  AE
  AP
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  address: StringFilter
  city: StringFilter
  state: AddressStateTypeNullableFilter
  zipCode: StringFilter
}

input AddressStateTypeNullableFilter {
  equals: AddressStateType
  in: [AddressStateType!]
  notIn: [AddressStateType!]
  not: AddressStateTypeNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  address: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zipCode: OrderDirection
}

input AddressUpdateInput {
  address: String
  city: String
  state: AddressStateType
  zipCode: String
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  address: String
  city: String
  state: AddressStateType
  zipCode: String
}

type Reservable {
  id: ID!
  name: String
  make: String
  model: String
  seats: Int
  tags(
    where: ReservableTagWhereInput! = {}
    orderBy: [ReservableTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableTag!]
  tagsCount(where: ReservableTagWhereInput! = {}): Int
  description: Reservable_description_Document
  features(
    where: ReservableFeatureWhereInput! = {}
    orderBy: [ReservableFeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableFeature!]
  featuresCount(where: ReservableFeatureWhereInput! = {}): Int
  files(
    where: ReservableFileWhereInput! = {}
    orderBy: [ReservableFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableFile!]
  filesCount(where: ReservableFileWhereInput! = {}): Int
  pickup: ReservablePickupLocation
  extras: Reservable_extras_Document
  cancellationCost: ReservableCancellationCost
  availabilityInclude(
    where: ReservableAvailabilityIncludeWhereInput! = {}
    orderBy: [ReservableAvailabilityIncludeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableAvailabilityInclude!]
  availabilityIncludeCount(
    where: ReservableAvailabilityIncludeWhereInput! = {}
  ): Int
  availabilityExclude(
    where: ReservableAvailabilityExcludeWhereInput! = {}
    orderBy: [ReservableAvailabilityExcludeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableAvailabilityExclude!]
  availabilityExcludeCount(
    where: ReservableAvailabilityExcludeWhereInput! = {}
  ): Int
  images(
    where: ReservableImageWhereInput! = {}
    orderBy: [ReservableImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReservableImage!]
  imagesCount(where: ReservableImageWhereInput! = {}): Int
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservationsCount(where: ReservationWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type Reservable_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Reservable_extras_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReservableWhereUniqueInput {
  id: ID
}

input ReservableWhereInput {
  AND: [ReservableWhereInput!]
  OR: [ReservableWhereInput!]
  NOT: [ReservableWhereInput!]
  id: IDFilter
  name: StringFilter
  make: StringFilter
  model: StringFilter
  seats: IntFilter
  tags: ReservableTagManyRelationFilter
  features: ReservableFeatureManyRelationFilter
  files: ReservableFileManyRelationFilter
  pickup: ReservablePickupLocationWhereInput
  cancellationCost: ReservableCancellationCostWhereInput
  availabilityInclude: ReservableAvailabilityIncludeManyRelationFilter
  availabilityExclude: ReservableAvailabilityExcludeManyRelationFilter
  images: ReservableImageManyRelationFilter
  reservations: ReservationManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ReservableTagManyRelationFilter {
  every: ReservableTagWhereInput
  some: ReservableTagWhereInput
  none: ReservableTagWhereInput
}

input ReservableFeatureManyRelationFilter {
  every: ReservableFeatureWhereInput
  some: ReservableFeatureWhereInput
  none: ReservableFeatureWhereInput
}

input ReservableFileManyRelationFilter {
  every: ReservableFileWhereInput
  some: ReservableFileWhereInput
  none: ReservableFileWhereInput
}

input ReservableAvailabilityIncludeManyRelationFilter {
  every: ReservableAvailabilityIncludeWhereInput
  some: ReservableAvailabilityIncludeWhereInput
  none: ReservableAvailabilityIncludeWhereInput
}

input ReservableAvailabilityExcludeManyRelationFilter {
  every: ReservableAvailabilityExcludeWhereInput
  some: ReservableAvailabilityExcludeWhereInput
  none: ReservableAvailabilityExcludeWhereInput
}

input ReservableImageManyRelationFilter {
  every: ReservableImageWhereInput
  some: ReservableImageWhereInput
  none: ReservableImageWhereInput
}

input ReservableOrderByInput {
  id: OrderDirection
  name: OrderDirection
  make: OrderDirection
  model: OrderDirection
  seats: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReservableUpdateInput {
  name: String
  make: String
  model: String
  seats: Int
  tags: ReservableTagRelateToManyForUpdateInput
  description: JSON
  features: ReservableFeatureRelateToManyForUpdateInput
  files: ReservableFileRelateToManyForUpdateInput
  pickup: ReservablePickupLocationRelateToOneForUpdateInput
  extras: JSON
  cancellationCost: ReservableCancellationCostRelateToOneForUpdateInput
  availabilityInclude: ReservableAvailabilityIncludeRelateToManyForUpdateInput
  availabilityExclude: ReservableAvailabilityExcludeRelateToManyForUpdateInput
  images: ReservableImageRelateToManyForUpdateInput
  reservations: ReservationRelateToManyForUpdateInput
}

input ReservableTagRelateToManyForUpdateInput {
  disconnect: [ReservableTagWhereUniqueInput!]
  set: [ReservableTagWhereUniqueInput!]
  create: [ReservableTagCreateInput!]
  connect: [ReservableTagWhereUniqueInput!]
}

input ReservableFeatureRelateToManyForUpdateInput {
  disconnect: [ReservableFeatureWhereUniqueInput!]
  set: [ReservableFeatureWhereUniqueInput!]
  create: [ReservableFeatureCreateInput!]
  connect: [ReservableFeatureWhereUniqueInput!]
}

input ReservableFileRelateToManyForUpdateInput {
  disconnect: [ReservableFileWhereUniqueInput!]
  set: [ReservableFileWhereUniqueInput!]
  create: [ReservableFileCreateInput!]
  connect: [ReservableFileWhereUniqueInput!]
}

input ReservablePickupLocationRelateToOneForUpdateInput {
  create: ReservablePickupLocationCreateInput
  connect: ReservablePickupLocationWhereUniqueInput
  disconnect: Boolean
}

input ReservableCancellationCostRelateToOneForUpdateInput {
  create: ReservableCancellationCostCreateInput
  connect: ReservableCancellationCostWhereUniqueInput
  disconnect: Boolean
}

input ReservableAvailabilityIncludeRelateToManyForUpdateInput {
  disconnect: [ReservableAvailabilityIncludeWhereUniqueInput!]
  set: [ReservableAvailabilityIncludeWhereUniqueInput!]
  create: [ReservableAvailabilityIncludeCreateInput!]
  connect: [ReservableAvailabilityIncludeWhereUniqueInput!]
}

input ReservableAvailabilityExcludeRelateToManyForUpdateInput {
  disconnect: [ReservableAvailabilityExcludeWhereUniqueInput!]
  set: [ReservableAvailabilityExcludeWhereUniqueInput!]
  create: [ReservableAvailabilityExcludeCreateInput!]
  connect: [ReservableAvailabilityExcludeWhereUniqueInput!]
}

input ReservableImageRelateToManyForUpdateInput {
  disconnect: [ReservableImageWhereUniqueInput!]
  set: [ReservableImageWhereUniqueInput!]
  create: [ReservableImageCreateInput!]
  connect: [ReservableImageWhereUniqueInput!]
}

input ReservableUpdateArgs {
  where: ReservableWhereUniqueInput!
  data: ReservableUpdateInput!
}

input ReservableCreateInput {
  name: String
  make: String
  model: String
  seats: Int
  tags: ReservableTagRelateToManyForCreateInput
  description: JSON
  features: ReservableFeatureRelateToManyForCreateInput
  files: ReservableFileRelateToManyForCreateInput
  pickup: ReservablePickupLocationRelateToOneForCreateInput
  extras: JSON
  cancellationCost: ReservableCancellationCostRelateToOneForCreateInput
  availabilityInclude: ReservableAvailabilityIncludeRelateToManyForCreateInput
  availabilityExclude: ReservableAvailabilityExcludeRelateToManyForCreateInput
  images: ReservableImageRelateToManyForCreateInput
  reservations: ReservationRelateToManyForCreateInput
}

input ReservableTagRelateToManyForCreateInput {
  create: [ReservableTagCreateInput!]
  connect: [ReservableTagWhereUniqueInput!]
}

input ReservableFeatureRelateToManyForCreateInput {
  create: [ReservableFeatureCreateInput!]
  connect: [ReservableFeatureWhereUniqueInput!]
}

input ReservableFileRelateToManyForCreateInput {
  create: [ReservableFileCreateInput!]
  connect: [ReservableFileWhereUniqueInput!]
}

input ReservablePickupLocationRelateToOneForCreateInput {
  create: ReservablePickupLocationCreateInput
  connect: ReservablePickupLocationWhereUniqueInput
}

input ReservableCancellationCostRelateToOneForCreateInput {
  create: ReservableCancellationCostCreateInput
  connect: ReservableCancellationCostWhereUniqueInput
}

input ReservableAvailabilityIncludeRelateToManyForCreateInput {
  create: [ReservableAvailabilityIncludeCreateInput!]
  connect: [ReservableAvailabilityIncludeWhereUniqueInput!]
}

input ReservableAvailabilityExcludeRelateToManyForCreateInput {
  create: [ReservableAvailabilityExcludeCreateInput!]
  connect: [ReservableAvailabilityExcludeWhereUniqueInput!]
}

input ReservableImageRelateToManyForCreateInput {
  create: [ReservableImageCreateInput!]
  connect: [ReservableImageWhereUniqueInput!]
}

type ReservableTag {
  id: ID!
  value: String
  reservables(
    where: ReservableWhereInput! = {}
    orderBy: [ReservableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservable!]
  reservablesCount(where: ReservableWhereInput! = {}): Int
}

input ReservableTagWhereUniqueInput {
  id: ID
}

input ReservableTagWhereInput {
  AND: [ReservableTagWhereInput!]
  OR: [ReservableTagWhereInput!]
  NOT: [ReservableTagWhereInput!]
  id: IDFilter
  value: StringFilter
  reservables: ReservableManyRelationFilter
}

input ReservableManyRelationFilter {
  every: ReservableWhereInput
  some: ReservableWhereInput
  none: ReservableWhereInput
}

input ReservableTagOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input ReservableTagUpdateInput {
  value: String
  reservables: ReservableRelateToManyForUpdateInput
}

input ReservableRelateToManyForUpdateInput {
  disconnect: [ReservableWhereUniqueInput!]
  set: [ReservableWhereUniqueInput!]
  create: [ReservableCreateInput!]
  connect: [ReservableWhereUniqueInput!]
}

input ReservableTagUpdateArgs {
  where: ReservableTagWhereUniqueInput!
  data: ReservableTagUpdateInput!
}

input ReservableTagCreateInput {
  value: String
  reservables: ReservableRelateToManyForCreateInput
}

input ReservableRelateToManyForCreateInput {
  create: [ReservableCreateInput!]
  connect: [ReservableWhereUniqueInput!]
}

type ReservableFeature {
  id: ID!
  value: String
  reservables(
    where: ReservableWhereInput! = {}
    orderBy: [ReservableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservable!]
  reservablesCount(where: ReservableWhereInput! = {}): Int
}

input ReservableFeatureWhereUniqueInput {
  id: ID
}

input ReservableFeatureWhereInput {
  AND: [ReservableFeatureWhereInput!]
  OR: [ReservableFeatureWhereInput!]
  NOT: [ReservableFeatureWhereInput!]
  id: IDFilter
  value: StringFilter
  reservables: ReservableManyRelationFilter
}

input ReservableFeatureOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input ReservableFeatureUpdateInput {
  value: String
  reservables: ReservableRelateToManyForUpdateInput
}

input ReservableFeatureUpdateArgs {
  where: ReservableFeatureWhereUniqueInput!
  data: ReservableFeatureUpdateInput!
}

input ReservableFeatureCreateInput {
  value: String
  reservables: ReservableRelateToManyForCreateInput
}

type ReservablePickupLocation {
  id: ID!
  name: String
  address: Address
  reservables(
    where: ReservableWhereInput! = {}
    orderBy: [ReservableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservable!]
  reservablesCount(where: ReservableWhereInput! = {}): Int
}

input ReservablePickupLocationWhereUniqueInput {
  id: ID
}

input ReservablePickupLocationWhereInput {
  AND: [ReservablePickupLocationWhereInput!]
  OR: [ReservablePickupLocationWhereInput!]
  NOT: [ReservablePickupLocationWhereInput!]
  id: IDFilter
  name: StringFilter
  address: AddressWhereInput
  reservables: ReservableManyRelationFilter
}

input ReservablePickupLocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ReservablePickupLocationUpdateInput {
  name: String
  address: AddressRelateToOneForUpdateInput
  reservables: ReservableRelateToManyForUpdateInput
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input ReservablePickupLocationUpdateArgs {
  where: ReservablePickupLocationWhereUniqueInput!
  data: ReservablePickupLocationUpdateInput!
}

input ReservablePickupLocationCreateInput {
  name: String
  address: AddressRelateToOneForCreateInput
  reservables: ReservableRelateToManyForCreateInput
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

type ReservableCancellationCost {
  id: ID!
  label: String
  cost: Int
  isPercent: Boolean
  reservables(
    where: ReservableWhereInput! = {}
    orderBy: [ReservableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservable!]
  reservablesCount(where: ReservableWhereInput! = {}): Int
}

input ReservableCancellationCostWhereUniqueInput {
  id: ID
}

input ReservableCancellationCostWhereInput {
  AND: [ReservableCancellationCostWhereInput!]
  OR: [ReservableCancellationCostWhereInput!]
  NOT: [ReservableCancellationCostWhereInput!]
  id: IDFilter
  cost: IntNullableFilter
  isPercent: BooleanFilter
  reservables: ReservableManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ReservableCancellationCostOrderByInput {
  id: OrderDirection
  cost: OrderDirection
  isPercent: OrderDirection
}

input ReservableCancellationCostUpdateInput {
  cost: Int
  isPercent: Boolean
  reservables: ReservableRelateToManyForUpdateInput
}

input ReservableCancellationCostUpdateArgs {
  where: ReservableCancellationCostWhereUniqueInput!
  data: ReservableCancellationCostUpdateInput!
}

input ReservableCancellationCostCreateInput {
  cost: Int
  isPercent: Boolean
  reservables: ReservableRelateToManyForCreateInput
}

type ReservableImage {
  id: ID!
  name: String
  alt: String
  image: S3ImagesFieldOutput
}

interface S3ImagesFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  sizesMeta: JSON
  extension: S3ImagesExtension!
  ref(size: S3ImagesSizeEnum! = md, meta: Boolean! = false): String!
  url(size: S3ImagesSizeEnum! = md): String
  srcSet(sizes: [S3ImagesSizeEnum!]! = [sm, md, lg, full]): String
}

enum S3ImagesExtension {
  jpg
  png
  webp
  gif
}

enum S3ImagesSizeEnum {
  base64
  sm
  md
  lg
  full
}

input ReservableImageWhereUniqueInput {
  id: ID
}

type S3ImagesFieldOutputType implements S3ImagesFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  sizesMeta: JSON
  extension: S3ImagesExtension!
  ref(size: S3ImagesSizeEnum! = md, meta: Boolean! = false): String!
  url(size: S3ImagesSizeEnum! = md): String
  srcSet(sizes: [S3ImagesSizeEnum!]! = [sm, md, lg, full]): String
}

input ReservableImageWhereInput {
  AND: [ReservableImageWhereInput!]
  OR: [ReservableImageWhereInput!]
  NOT: [ReservableImageWhereInput!]
  id: IDFilter
  name: StringFilter
  alt: StringFilter
}

input ReservableImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  alt: OrderDirection
}

input ReservableImageUpdateInput {
  name: String
  alt: String
  image: S3ImagesFieldInput
}

input S3ImagesFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ReservableImageUpdateArgs {
  where: ReservableImageWhereUniqueInput!
  data: ReservableImageUpdateInput!
}

input ReservableImageCreateInput {
  name: String
  alt: String
  image: S3ImagesFieldInput
}

type ReservableFile {
  id: ID!
  name: String
  file: S3FileFieldOutput
}

interface S3FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input ReservableFileWhereUniqueInput {
  id: ID
}

type S3FileFieldOutputType implements S3FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input ReservableFileWhereInput {
  AND: [ReservableFileWhereInput!]
  OR: [ReservableFileWhereInput!]
  NOT: [ReservableFileWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ReservableFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ReservableFileUpdateInput {
  name: String
  file: S3FileFieldInput
}

input S3FileFieldInput {
  upload: Upload
  ref: String
}

input ReservableFileUpdateArgs {
  where: ReservableFileWhereUniqueInput!
  data: ReservableFileUpdateInput!
}

input ReservableFileCreateInput {
  name: String
  file: S3FileFieldInput
}

type ReservableAvailabilityExclude {
  id: ID!
  label: String
  startDate: DateTime
  endDate: DateTime
}

input ReservableAvailabilityExcludeWhereUniqueInput {
  id: ID
}

input ReservableAvailabilityExcludeWhereInput {
  AND: [ReservableAvailabilityExcludeWhereInput!]
  OR: [ReservableAvailabilityExcludeWhereInput!]
  NOT: [ReservableAvailabilityExcludeWhereInput!]
  id: IDFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ReservableAvailabilityExcludeOrderByInput {
  id: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input ReservableAvailabilityExcludeUpdateInput {
  startDate: DateTime
  endDate: DateTime
}

input ReservableAvailabilityExcludeUpdateArgs {
  where: ReservableAvailabilityExcludeWhereUniqueInput!
  data: ReservableAvailabilityExcludeUpdateInput!
}

input ReservableAvailabilityExcludeCreateInput {
  startDate: DateTime
  endDate: DateTime
}

type ReservableAvailabilityInclude {
  id: ID!
  label: String
  startDate: DateTime
  endDate: DateTime
  cost: Int
}

input ReservableAvailabilityIncludeWhereUniqueInput {
  id: ID
}

input ReservableAvailabilityIncludeWhereInput {
  AND: [ReservableAvailabilityIncludeWhereInput!]
  OR: [ReservableAvailabilityIncludeWhereInput!]
  NOT: [ReservableAvailabilityIncludeWhereInput!]
  id: IDFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  cost: IntNullableFilter
}

input ReservableAvailabilityIncludeOrderByInput {
  id: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  cost: OrderDirection
}

input ReservableAvailabilityIncludeUpdateInput {
  startDate: DateTime
  endDate: DateTime
  cost: Int
}

input ReservableAvailabilityIncludeUpdateArgs {
  where: ReservableAvailabilityIncludeWhereUniqueInput!
  data: ReservableAvailabilityIncludeUpdateInput!
}

input ReservableAvailabilityIncludeCreateInput {
  startDate: DateTime
  endDate: DateTime
  cost: Int
}

type Reservation {
  id: ID!
  label: String
  user: User
  reservable: Reservable
  startDate: DateTime
  endDate: DateTime
  totalCost: Int
  receipt: Receipt
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ReservationWhereUniqueInput {
  id: ID
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  user: UserWhereInput
  reservable: ReservableWhereInput
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  totalCost: IntNullableFilter
  receipt: ReceiptWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ReservationOrderByInput {
  id: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  totalCost: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReservationUpdateInput {
  user: UserRelateToOneForUpdateInput
  reservable: ReservableRelateToOneForUpdateInput
  startDate: DateTime
  endDate: DateTime
  totalCost: Int
  receipt: ReceiptRelateToOneForUpdateInput
}

input ReservableRelateToOneForUpdateInput {
  create: ReservableCreateInput
  connect: ReservableWhereUniqueInput
  disconnect: Boolean
}

input ReceiptRelateToOneForUpdateInput {
  create: ReceiptCreateInput
  connect: ReceiptWhereUniqueInput
  disconnect: Boolean
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  user: UserRelateToOneForCreateInput
  reservable: ReservableRelateToOneForCreateInput
  startDate: DateTime
  endDate: DateTime
  totalCost: Int
  receipt: ReceiptRelateToOneForCreateInput
}

input ReservableRelateToOneForCreateInput {
  create: ReservableCreateInput
  connect: ReservableWhereUniqueInput
}

input ReceiptRelateToOneForCreateInput {
  create: ReceiptCreateInput
  connect: ReceiptWhereUniqueInput
}

type Receipt {
  id: ID!
  reservable: Reservation
  totalCost: Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input ReceiptWhereUniqueInput {
  id: ID
}

input ReceiptWhereInput {
  AND: [ReceiptWhereInput!]
  OR: [ReceiptWhereInput!]
  NOT: [ReceiptWhereInput!]
  id: IDFilter
  reservable: ReservationWhereInput
  totalCost: IntNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ReceiptOrderByInput {
  id: OrderDirection
  totalCost: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ReceiptUpdateInput {
  reservable: ReservationRelateToOneForUpdateInput
  totalCost: Int
}

input ReservationRelateToOneForUpdateInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
  disconnect: Boolean
}

input ReceiptUpdateArgs {
  where: ReceiptWhereUniqueInput!
  data: ReceiptUpdateInput!
}

input ReceiptCreateInput {
  reservable: ReservationRelateToOneForCreateInput
  totalCost: Int
}

input ReservationRelateToOneForCreateInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
